import pybert as pb 
import pygimli as pg 
import pygimli.meshtools as mt
world = mt.createWorld(start=[-48, 0], end=[48, -20], worldMarker=True)
circleL = mt.createCircle(pos=[-30, -10.], radius=[4, 4], marker=2, boundaryMarker=10, area=0.1) 
circleH = mt.createCircle(pos=[30, -10.], radius=[4, 4], marker=3, boundaryMarker=10, area=0.1) 
geom = mt.mergePLC([world, circleL , circleH]) 
pg.show(geom)
scheme = pb.createData(elecs=pg.utils.grange(start=-48, end=48, n=48), schemeName='dd') 
#For other electrod configuration used we used 
#schemeName='slm' for Schlumberger
#schemeName='wa' for Wenner Alpha
#schemeName='wb' for Wenner beta
for pos in scheme.sensorPositions(): 
geom.createNode(pos) 
geom.createNode(pos + pg.RVector3(0, -0.1))
mesh = mt.createMesh(geom, quality = 33.5, area= 1, smooth=True) 
pg.show(mesh);
pg.show(mesh, data=rhomap, label='Resistivity $(\Omega$m)', showMesh=True)
ert = pb.ERTManager() 
data = ert.simulate(mesh, res=rhomap, scheme=scheme, noiseLevel=1, noiseAbs=1e-6)
print('Simulated rhoa', data('rhoa'), max(data('rhoa'))) 
data.markInvalid(data('rhoa') < 0) print('Filtered rhoa', data('rhoa'), max(data('rhoa'))) 
data.removeInvalid()
import matplotlib.pyplot as plt 
import numpy as np 
model = ert.invert(data, paraDepth=25, lam=5, paraMaxCellSize=1, paraBoundary=0, verbose=True)
ert.showResult() 
ert.showResultAndFit()
grid = pg.createGrid(x=pg.utils.grange(start=-48, end=48, n=48), y=-pg.utils.grange(0.5, 8, n=8, log=True)) 
mesh = pg.meshtools.appendTriangleBoundary(grid, xbound=50, ybound=50) 
model = ert.invert(data, mesh=mesh, lam=5) 
ert.showResultAndFit() 
chi2 = ert.inv.getChi2() 
print(chi2) 
pg.wait()
ert.showResult(cMin=15, cMax=100, xlabel="x (m)", ylabel="z (m)");
plt.savefig("name.jpg",dpi=1200, bbox_inches="tight") 
ert.showResult() 
ert.showFit()
