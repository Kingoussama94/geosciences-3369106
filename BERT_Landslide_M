import pybert as pb
import pygimli.meshtools as mt
left = -48 right = 48 depth = 25 world = mt.createWorld(start=[left, 0], 
end=[right, -depth], layers=[-3]) line = mt.createLine(start=[left, -3], end=[right, -25]) 
block = mt.createCircle(pos=[30, -13.], radius=[6, 1.3], marker=3, boundaryMarker=10, area=0.1, interpolate="spline") 
geometry = world + line + block pg.show(geometry);

mesh = mt.createMesh(geometry, quality = 33.5, area= 10, smooth=True) 
pg.show(mesh); scheme = pb.createData(elecs=pg.utils.grange(start=-48, end=48, n=48), schemeName='dd') 
for p in scheme.sensors(): geometry.createNode(p) 
geometry.createNode(p - [0, 0.1]) rhomap = [[0, 5.], [1, 125.], [2, 150.], [3, 200.]] 
pg.show(mesh, data=rhomap, label=pg.unit('res'), showMesh=True)

ert = pb.ERTManager() 
data = ert.simulate(mesh, res=rhomap, scheme=scheme, noiseLevel=1, noiseAbs=1e-6) 
print('Simulated rhoa', data('rhoa'), max(data('rhoa'))) 
data.markInvalid(data('rhoa') < 0) print('Filtered rhoa', data('rhoa'), max(data('rhoa'))) 
data.removeInvalid() 
data.save('simple.dat') 
pb.show(data)

import matplotlib.pyplot as plt
import numpy as np 
model = ert.invert(data,lam=5, paraMaxCellSize=1, paraBoundary=0, paraDepth=25, verbose=True) 
ert.showResult(cMin=1, cMax=200, xlabel="x (m)", ylabel="z (m)") ert.showFit()
